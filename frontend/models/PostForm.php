<?php

namespace frontend\models;

use common\models\Posts;
use common\models\RelationPostTags;
use Yii;
use yii\base\Model;
use yii\db\Exception;
use yii\db\Query;
use yii\web\BadRequestHttpException;
use yii\web\NotFoundHttpException;

//use yii\web\UploadedFile;


/**
 * ContactForm is the model behind the contact form.
 */
class PostForm extends Model
{
    public $id;
    public $title;
    public $summary;
    public $content;
    /**
     * @var UploadedFile
     */
    public $label_img;
    public $cat_id;
    public $tags;

    public $_lastError = '';


    const SCENARIO_CREATE = 'create';
    const SCENARIO_UPDATE = 'update';

    const EVENT_AFTER_CREATE = 'eventAfterCreate';
    const EVENT_AFTER_UPDATE = 'eventAfterUpdate';


    public function scenarios()
    {
        $scenarios = [
            self::SCENARIO_CREATE => ['title', 'summary', 'content', 'label_img', 'cat_id', 'tags'],
            self::SCENARIO_UPDATE => ['title', 'summary', 'content', 'label_img', 'cat_id', 'tags']
        ];

        return array_merge(parent::scenarios(), $scenarios); // TODO: Change the autogenerated stub
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['id', 'title', 'content', 'cat_id'], 'required'],
            [['id', 'cat_id'], 'integer'],
            ['title', 'string', 'min' => 5, 'max' => 200],
            ['content', 'string'],
//            [['label_img'], 'file', 'skipOnEmpty' => false, 'extensions' => 'png,jpg'],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id'        => Yii::t('app', 'ID'),
            'title'     => Yii::t('app', 'title'),
            'summary'   => Yii::t('app', 'summary'),
            'content'   => Yii::t('app', 'content'),
            'label_img' => Yii::t('app', 'label_img'),
            'cat_id'    => Yii::t('app', 'cat_id'),
            'tags'      => Yii::t('app', 'tags')
        ];
    }

//    public function upload()
//    {
//        if ($this->validate()) {
//            $this->label_img->saveAs('uploads/' . $this->label_img->baseName . '.' . $this->label_img->extension);
//            return true;
//        } else {
//            return false;
//        }
//    }

    public function create()
    {
        $transaction = Yii::$app->db->beginTransaction();

        try {
            $model = new Posts();
            $model->setAttributes($this->attributes);
            $model->user_id    = Yii::$app->user->identity->id;
            $model->user_name  = Yii::$app->user->identity->username;
            $model->is_valid   = Posts::IS_VALID;
            $model->created_at = time();
            $model->updated_at = time();
            $model->summary    = mb_substr(strip_tags($model->summary), 0, 200);

            if (!$model->save())
                throw new Exception("文章保存失败");

            $this->id = $model->id;

            $data = array_merge($this->getAttributes(), $model->getAttributes());
            $this->_eventAfterCreate($data);
            $transaction->commit();
            return true;
        } catch (Exception $e) {
            $transaction->rollBack();
            $this->_lastError = $e->getMessage();
            return false;
        }
    }

    /**
     *
     * @param Posts $post
     */
    public function loadPost($post)
    {
        $this->id        = $post->id;
        $this->title     = $post->title;
        $this->summary   = $post->summary;
        $this->content   = $post->content;
        $this->label_img = $post->label_img;
        $this->cat_id    = $post->cat_id;
        $this->tags      = $post->tags;
    }

    /**
     * 更新
     *
     * @return bool
     * @throws Exception
     */
    public function update()
    {
        $transaction = Yii::$app->db->beginTransaction();

        try {
            $model = Posts::findOne(['id' => $this->id]);

            $model->setAttributes($this->attributes);
            $model->user_id    = Yii::$app->user->identity->id;
            $model->user_name  = Yii::$app->user->identity->username;
            $model->is_valid   = Posts::IS_VALID;
            $model->created_at = time();
            $model->updated_at = time();

            if (!$model->save())
                throw new Exception("更新失败");

            $this->id = $model->id;

            $data = array_merge($this->getAttributes(), $model->getAttributes());
            $this->_eventAfterCreate($data);
            $transaction->commit();
            return true;
        } catch (Exception $e) {
            $transaction->rollBack();
            $this->_lastError = $e->getMessage();
            return false;
        }
    }

    /**
     * 文章创建之后的事件处理
     * @param $data
     */
    public function _eventAfterCreate($data)
    {
        $this->on(self::EVENT_AFTER_CREATE, [$this, '_eventAddTag'], $data);

        $this->trigger(self::EVENT_AFTER_CREATE);
    }

    public function _eventAddTag($event)
    {
        $tag = new TagsForm();

        $tag->tags = $event->data['tags'];

        $tagsIds = $tag->saveTags();

        RelationPostTags::deleteAll(['post_id' => $event->data['id']]);

        if (!empty($tagsIds)) {
            foreach ($tagsIds as $k => $tagId) {
                $row[$k]['post_id'] = $event->data['id'];
                $row[$k]['tag_id']  = $tagId;
            }

            $query = new Query();
            $res   = $query->createCommand()
                ->batchInsert(RelationPostTags::tableName(), ['post_id', 'tag_id'], $row)
                ->execute();
            if (!$res) {
                throw new Exception('文章标签关系映射失败');
            }
        }


    }

    /**
     * 查询一条文章数据
     *
     * @param $id
     * @return array|Posts|\yii\db\ActiveRecord|null
     * @throws NotFoundHttpException
     */
    public function getPostById($id)
    {
        $res = Posts::find()
            ->with('relate.tag', 'extend')
            ->where(['id' => $id])
            ->one();

        if (empty($res)) {
            throw  new NotFoundHttpException("文章不存在");
        }

        if($res->is_valid != Posts::IS_VALID){
            throw  new BadRequestHttpException("文章未审核");
        }

        $res->tags = [];
        if (isset($res->relate) && !empty($res->relate)) {
            foreach ($res->relate as $relate) {
                $res->tags[] = $relate->tag->tag_name;
            }
        }

        return $res;
    }

    public function getList($cond, $page = 1, $pageSize = 5, $orderBy = ['id' => SORT_DESC])
    {
        $model  = new Posts();
        $select = [
            'id', 'title', 'summary', 'content', 'label_img', 'cat_id',
            'is_valid', 'user_id', 'user_name', 'created_at', 'updated_at'
        ];
        $query  = $model->find()
            ->select($select)
            ->where($cond)
            ->with('relate.tag', 'extend')
            ->orderBy($orderBy);

        $data = $model->getPage($query, $page, $pageSize);

        $data['data'] = $this->_formatData($data['data']);

        return $data;
    }

    /**
     *  数据格式化
     * @param $data
     * @return mixed
     */
    private function _formatData($data)
    {
        foreach ($data as &$list) {
            $list['tags'] = [];
            if (isset($list['relate']) && !empty($list['relate'])) {
                $list['tags'] = array_column(array_column($list['relate'], 'tag'), 'tag_name');
            }

            unset($list['relate']);
        }

        return $data;
    }
}
